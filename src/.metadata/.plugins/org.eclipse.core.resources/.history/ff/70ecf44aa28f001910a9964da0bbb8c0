/**
 * \file BasicStm.c
 * \brief BasicStm
 *
 * \version InfineonRacer 1_0_0
 */

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include <stdio.h>

#include "Configuration.h"
//#include "Basic.h"
#include "BasicStm.h"
#include "AppTaskFu.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/
#define ACTIVE_LIMIT (50.0F)	//Active Value Setting
/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/
typedef struct
{
    Ifx_STM             *stmSfr;            /**< \brief Pointer to Stm register base */
    IfxStm_CompareConfig stmConfig;         /**< \brief Stm Configuration structure */
    volatile uint8       LedBlink;          /**< \brief LED state variable */
    volatile uint32      counter;           /**< \brief interrupt counter */
} Basic_Stm;

/******************************************************************************/
/*------------------------------Global variables------------------------------*/
/******************************************************************************/

Basic_Stm g_Stm; /**< \brief Stm global data */
/******************************************************************************/
/*-------------------------Function Prototypes--------------------------------*/
/******************************************************************************/
static void BlinkLed_run(void);
static void BlinkLed_init(void);
static void MedianFilter(sensor_t* psen)
/******************************************************************************/
/*------------------------Private Variables/Constants-------------------------*/
/******************************************************************************/

/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/
/** \addtogroup IfxLld_Demo_Stm_SrcDoc_Main_Interrupt
 * \{ */

/** \name Interrupts for SystemTimer(STM) driver.
 * \{ */
IFX_INTERRUPT(STM_Int0Handler, 0, ISR_PRIORITY_STM_INT0);
/** \} */

/** \} */
/** \brief Handle SystemTimer(STM) interrupt
 *
 * \isrProvider \ref ISR_PROVIDER_SystemTimer(STM)
 * \isrPriority \ref ISR_PRIORITY_SystemTimer(STM)
 *
 */
void STM_Int0Handler(void)
{
	int cnt=0;
    IfxStm_clearCompareFlag(g_Stm.stmSfr, g_Stm.stmConfig.comparator);
#ifdef SIMULATION
	IfxStm_increaseCompare(g_Stm.stmSfr, g_Stm.stmConfig.comparator, 1000);
#else
	IfxStm_increaseCompare(g_Stm.stmSfr, g_Stm.stmConfig.comparator, TimeConst_1ms);
#endif
    IfxCpu_enableInterrupts();

    setOutputPin(RED_LED.port, RED_LED.pinIndex, 1);

    g_int32_cnt++;
    BasicLineScan_run(); // ADC
    //g_plsen = g_sen[LEFT];
   // g_prsen = g_sen[RIGHT];
	for(cnt = 4; cnt < 124; cnt++)
	{
		g_lsen[cnt-4].u32result = g_sen[LEFT][cnt].u32result;
		g_rsen[cnt-4].u32result = g_sen[RIGHT][cnt].u32result;
	}
    // Sensor Value Getting

    MedianFilter(g_rsen);
    MedianFilter(g_lsen);

//
//    for(cnt = 0; cnt < 120; cnt++)
//    {
//        g_rcsen[cnt].u32result= g_rsen[cnt].u32result;
//        g_lcsen[cnt].u32result= g_lsen[cnt].u32result;
//    }

    for (cnt = 0; cnt<120; cnt++)
    {

    	g_rcsen[cnt].u32result= g_rsen[cnt].u32result;
    	g_lcsen[cnt].u32result= g_lsen[cnt].u32result;
    	// 센서값을 센서컨트롤 구조체에다가 대입

    	if(g_rcsen[cnt].u32result >= g_int32right_white) g_rcsen[cnt].f32data = 127.0;
    	else if(g_rcsen[cnt].u32result <= g_int32right_black) g_rcsen[cnt].f32data = 0.0;
        else
            {
            	g_rcsen[cnt].f32data = ((float)(g_rcsen[cnt].u32result - g_int32right_black) / (float)(g_int32right_white - g_int32right_black)) * 127.0;
            }

    	if(g_lcsen[cnt].u32result >= g_int32left_white) g_lcsen[cnt].f32data = 127.0;
    	else if(g_lcsen[cnt].u32result <= g_int32left_black) g_lcsen[cnt].f32data = 0.0;
    	else
    		{
    			g_lcsen[cnt].f32data = ((float)(g_lcsen[cnt].u32result - g_int32left_black) / (float)(g_int32left_white - g_int32left_black)) * 127.0;
    		}

    	// 127등분 하는 부분
    	if(g_lcsen[cnt].f32data  < ACTIVE_LIMIT)	g_lcsen[cnt].u32active = TRUE;
    	else 							 	g_lcsen[cnt].u32active = FALSE;

    	if(g_rcsen[cnt].f32data  < ACTIVE_LIMIT) 	g_rcsen[cnt].u32active = TRUE;
    	else 							 			g_rcsen[cnt].u32active = FALSE;

    	//라인 인식 했는지 안했는지 판단하는 PASSIVE ACTIVE 체크
    }
    g_Flag.position_flag = TRUE;

    // 120 Divided Sensor Value


   // RED_LED_OFF;
   // GtmTomSrv_run();


    motor();   // Motor Interrupt
//    ServoControll(200000);
    setOutputPin(RED_LED.port, RED_LED.pinIndex, 0);

#if 0
    g_Stm.counter++;
    if(g_Stm.counter == 1000){
    	g_Stm.counter = 0;
    }

    task_flag_1m = TRUE;

    if(g_Stm.counter % 10 == 0){
    	task_flag_10m = TRUE;
    }
    if(g_Stm.counter % 100 == 0){
        task_flag_100m = TRUE;
        BlinkLed_run();
    }
    if(g_Stm.counter % 1000 == 0){
        task_flag_1000m = TRUE;
    }
#endif
    appIsrCb_1ms();

}


/** \brief LED Blinking
 *
 * This function blinks the LED connected to P 33.6 and counts the number
 *	of times the interrupt occurs.
 */
static void BlinkLed_run(void)
{
    g_Stm.LedBlink ^= 1;
    if (g_Stm.LedBlink == TRUE)
    {
        IfxPort_setPinState(LED_TICK.port, LED_TICK.pinIndex, IfxPort_State_high);
    }
    else
    {
        IfxPort_setPinState(LED_TICK.port, LED_TICK.pinIndex, IfxPort_State_low);
    }

}


/** \brief LED Initialization
 *
 * This function initializes the LED connected to P13.0
 */
static void BlinkLed_init(void)
{
    IfxPort_setPinMode(LED_TICK.port, LED_TICK.pinIndex, IfxPort_Mode_outputPushPullGeneral);
}


/** \brief Demo init API
 *
 * This function is called from main during initialization phase
 */
void BasicStm_init(void)
{
    printf("BasicStm_init() called\n");

    /* disable interrupts */
    boolean interruptState = IfxCpu_disableInterrupts();

    g_Stm.LedBlink = 0;
    g_Stm.counter  = 0;

    initTime();

    // suspend by debugger enabled
    IfxStm_enableOcdsSuspend (&MODULE_STM0);

    g_Stm.stmSfr = &MODULE_STM0;
    IfxStm_initCompareConfig(&g_Stm.stmConfig);

    g_Stm.stmConfig.triggerPriority = ISR_PRIORITY_STM_INT0;
    g_Stm.stmConfig.typeOfService   = IfxSrc_Tos_cpu0;
#ifdef SIMULATION
    g_SrcSwInt.stmConfig.ticks      = 1000;
#else
    g_Stm.stmConfig.ticks           = TimeConst_1ms;
#endif
    IfxStm_initCompare(g_Stm.stmSfr, &g_Stm.stmConfig);

    BlinkLed_init();

    appTaskfu_init();

    /* enable interrupts again */
    IfxCpu_restoreInterrupts(interruptState);
}


/** \brief Demo run API
 *
 * This function is called from main, background loop
 */
void BasicStm_run(void)
{
//    printf("BasicStm_run() called\n");
	if(task_flag_1m == TRUE){
		appTaskfu_1ms();
		task_flag_1m = FALSE;
	}

	if(task_flag_10m == TRUE){
		appTaskfu_10ms();
		task_flag_10m = FALSE;
	}

	if(task_flag_100m == TRUE){
		appTaskfu_100ms();
		task_flag_100m = FALSE;
	}

	if(task_flag_1000m == TRUE){
		appTaskfu_1000ms();
		task_flag_1000m = FALSE;
	}

	appTaskfu_idle();
}

int BubbleSort(int *a, int last_item)
{
	int loop1, loop2;
	int temp;
	for(loop1 = 0; loop1<last_item;loop1++)
	{
		for (loop2 = 0; loop2 < (last_item-loop1);loop2++)
		{
			if(a[loop2] > a[loop2 + 1])
			{
				temp = a[loop2];
				a[loop2] = a[loop2 + 1];
				a[loop2 + 1] = temp;
			}
		}
	}

	return a[last_item/2];

}

void MedianFilter(sensor_t* psen)
{
	int cnt = 0;
	int index = 0;
	int temp = 0;
	int temp_arr[5]={0,};
	for(cnt = 0; cnt < 120 ; cnt++)
	{
		for(temp=0; temp < 5;temp++)
			temp_arr[temp] = 0;
		if(cnt==0)
		{
			for(index = 0; index < 5; index++)
			{
				temp_arr[index+cnt]=(psen+index+cnt)->u32result;
				if(index+cnt+2 == 4) break;
			}
			(psen+cnt)->u32result = BubbleSort(temp_arr,3);
		}
		else if(cnt==1)
		{
			for(index = 0; index < 5; index++)
			{
				temp_arr[index+cnt-1]=(psen+index+cnt-1)->u32result;
				if(index+cnt+1 == 4) break;
			}
			(psen+cnt)->u32result = BubbleSort(temp_arr,4);
		}

		else if((cnt <= 117) && (cnt >= 2))
		{
			for(index = 0; index < 5; index++)
				{
					temp_arr[index]=(psen+cnt+index-2)->u32result;
				}
			(psen+cnt)->u32result = BubbleSort(temp_arr,5);
		}

		else if(cnt == 118)
		{
			for(index=0 ; index < 5; index++)
			{
				temp_arr[cnt+index-118] = (psen+index+cnt-2)->u32result;
				if(index+cnt-2 == 119) break;
			}
			(psen+cnt)->u32result = BubbleSort(temp_arr,4);
		}

		else if(cnt == 119)
				{
					for(index=0 ; index < 5; index++)
					{
						temp_arr[cnt+index-119] = (psen+index+cnt-2)->u32result;
						if(index+cnt-2 == 119) break;
					}
					(psen+cnt)->u32result = BubbleSort(temp_arr,3);
				}
		else;

	}
}

#if 0

void MedianFilter(sensor_t psen[])
{
	int cnt = 0;
	int index = 0;
	int temp = 0;
	int temp_arr[5]={0,};
	for(cnt = 0; cnt < 120 ; cnt++)
	{
		for(temp=0; temp < 5;temp++)
			temp_arr[temp] = 0;
		if(cnt < 2)
		{
			for(index = 0; index < 5; index++)
			{
				temp_arr[index+cnt+2]=(psen+index+cnt)->u32result;
				if(index+cnt+2 == 4) break;
			}
			(psen+cnt)->u32result = BubbleSort(temp_arr);
		}

		else if((cnt < 117) && (cnt > 2))
		{
			for(index = 0; index < 5; index++)
				{
					temp_arr[index]=(psen+cnt+index-2)->u32result;
				}
			(psen+cnt)->u32result = BubbleSort(temp_arr);
		}

		else if(cnt < 120)
		{
			for(index=0 ; index < 5; index++)
			{
				temp_arr[cnt+index] = (psen+index+cnt)->u32result;
				if(index+cnt == 119) break;
			}
			(psen+cnt)->u32result = BubbleSort(temp_arr);
		}
		else;

	}
}


int BubbleSort(int arr[])
{
	int i, j, temp;
	for(i=0;i<5;i++)
	{
		for(j = i+1 ;j < 5; j++)
		{
			if(*(arr+i)>*(arr+j))
			{
				temp = *(arr + i);
				*(arr + i) = *(arr + j);
				*(arr + j) = temp;
			}
		}
	}
	return *(arr+2);
}
#endif






