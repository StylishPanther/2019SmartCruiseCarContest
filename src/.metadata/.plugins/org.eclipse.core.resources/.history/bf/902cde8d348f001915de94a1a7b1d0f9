/*
 * motor.c
 *
 *  Created on: 2019. 5. 31.
 *      Author: ÀÌÁøÈ£
 */

#include "motor.h"
#define MAX_PID_OUT  	(10000)
#define MIN_PID_OUT    -(10000)

#define PWM_CONVERT  (1)



//#define WHEEL_RADIUS 66
//#define GEAR_RATIO 3.6
//#define PI 3.1415926535

#define SAMPLE_FRQ 	(0.01)

#define PULSE_TO_D (0.01087949867270116)
#define PULSE_TO_V (0.1138980498046875/SAMPLE_FRQ)

#define KP	(0.85)
#define KD	(0.80)

#define SERVO_1DEGREE 		1000
#define LEFT_LIMIT 		  100000
#define RIGHT_LIMIT		  200000
#define CENTER			  150000
void motor (void)
{

	g_Flag.motor_flag = TRUE;

		// Getting QEP Count from motor moving
		g_motor.int32qep_count= (int)GPT120_T2.I;


	   // Reset
		GPT120_T2.I = 0;

	  //  Getting QEP Value from QEP_Count
		g_motor.int32qep_val = (int)((g_motor.int32qep_count > 32768) ? -(65536 - g_motor.int32qep_count) : (g_motor.int32qep_count));
		//g_lm.int16qep_val = ( int16 )( (g_lm.u16qep_count>1024 ) ? -( 2049 - g_lm.u16qep_count ) : ( g_lm.u16qep_count ) );



	//Distance per a Interrupt

		g_motor.f32tick_dist = g_motor.int32qep_val * PULSE_TO_D;
//		g_lm.q27tick_dist = _IQ27mpyIQX( ( int32 )( g_lm.int16qep_val ) << 21 , 21 , PULSE_TO_D , 30 );

	// Sum of Distance
		g_motor.f32dist_sum += g_motor.f32tick_dist;
	//	g_lm.q17dist_sum += ( g_lm.q27tick_dist >> 10 );

	//For Turn_Dist
		g_motor.f32get_dist += ( g_motor.f32tick_dist);



	//Total Distance
		g_motor.f32total_dist = g_motor.f32dist_sum;
//		g_rm.q17total_dist = g_lm.q17dist_sum;;

	//Error Distance
		g_motor.f32err_dist = g_motor.f32user_dist - g_motor.f32total_dist;
		//g_rm.q17err_dist=  g_rm.q17user_dist - g_rm.q17total_dist;



	// Right Motor Velocity Checking
		g_motor.f32cur_vel[ 1 ] = g_motor.f32cur_vel[ 0 ];
		g_motor.f32cur_vel[ 0 ] = g_motor.int32qep_val * PULSE_TO_V; // Pulse to V = QEP Value * {x/2048 * Wheel_R/Gear Rate}
		g_motor.f32cur_vel_avr = ( g_motor.f32cur_vel[ 0 ] + g_motor.f32cur_vel[ 1 ] ) / 2.0;


	//Decel Flag Activating


	if( g_motor.int32decel_flag == TRUE )
		{

			if(g_motor.f32err_dist < 0) g_motor.f32err_dist = -g_motor.f32err_dist;



			//TxPrintf("Rolling\n");
			if(g_motor.f32decel_dist >= g_motor.f32err_dist)
			{
				g_motor.f32user_vel = g_motor.f32decel_vel;
				g_motor.f32user_vel = g_motor.f32decel_vel;
				g_motor.int32decel_flag = FALSE;


				g_Flag.speed_up = FALSE;
				g_Flag.speed_up_start = FALSE;

//				g_err.iq17over_dist = _IQ(0);
			}
		}

		else;


	// Accelerating & Decel Compute (L & R)

	if( g_motor.f32user_vel > g_motor.f32next_vel )
		{
			g_motor.f32next_vel += SAMPLE_FRQ * g_motor.int32accel;
			if( g_motor.f32user_vel < g_motor.f32next_vel )
				g_motor.f32next_vel = g_motor.f32user_vel;
		}
	else if( g_motor.f32user_vel < g_motor.f32next_vel)
		{
			g_motor.f32next_vel -= SAMPLE_FRQ * g_motor.int32accel;
			if( g_motor.f32user_vel > g_motor.f32next_vel)
				g_motor.f32next_vel = g_motor.f32user_vel;
		}
	else;



#if 1




	// PID Control - R
		g_motor.f32err_vel[ 3 ] = g_motor.f32err_vel[ 2 ];
		g_motor.f32err_vel[ 2 ] = g_motor.f32err_vel[ 1 ];
		g_motor.f32err_vel[ 1 ] = g_motor.f32err_vel[ 0 ];
		g_motor.f32err_vel[ 0 ] = (g_motor.f32next_vel * 1.0) - g_motor.f32cur_vel_avr;
		g_motor.f32err_vel_sum = ( ( g_motor.f32err_vel[ 0 ] + g_motor.f32err_vel[ 1 ] ) / 2.0 ) + ( ( g_motor.f32err_vel[ 2 ] + g_motor.f32err_vel[ 3 ] ) / 2.0  );

		g_motor.f32proportional = g_motor.f32kp * g_motor.f32err_vel[0];
		g_motor.f32derivative = g_motor.f32kd * ((g_motor.f32err_vel[0] - g_motor.f32err_vel[3]) + (g_motor.f32err_vel[1] - g_motor.f32err_vel[2]) * 3.0);

		g_motor.f32pid_out += g_motor.f32proportional + g_motor.f32derivative;




		if( g_Flag.motor_start == TRUE )
		{
			// Converting PID >> PWM Value

			if( g_motor.f32pid_out > 0 )
			{
				if( g_motor.f32pid_out > MAX_PID_OUT )
					g_motor.f32pid_out = MAX_PID_OUT;

//				GpioDataRegs.GPASET.bit.GPIO3 = 1;	// right

				g_motor.f32pid_result = g_motor.f32pid_out * PWM_CONVERT;
				MotorDirectionControll((int)(g_motor.f32pid_result), BACKWARD);
			}

			else
			{
				if( g_motor.f32pid_out < MIN_PID_OUT )
					g_motor.f32pid_out = MIN_PID_OUT;

//				GpioDataRegs.GPACLEAR.bit.GPIO3 = 1;	// right

				g_motor.f32pid_result =  -g_motor.f32pid_out * PWM_CONVERT;
				MotorDirectionControll((int)(g_motor.f32pid_result), FORWARD);
			}




		}
		else;

		if( g_Flag.start_flag ) g_int32timer_cnt++;
#endif

}

void MotorDirectionControll(int dutycycle,int direction)
{
	if(direction == FORWARD)
	{
		GTM_TOM0_CH2_SR0.B.SR0 = 10000;
		GTM_TOM0_CH2_SR1.B.SR1 = 10000 - dutycycle;

		GTM_TOM0_CH3_SR0.B.SR0 = 10000;
		GTM_TOM0_CH3_SR1.B.SR1 = 10000;
	}

	else if(direction == BACKWARD)
	{
		GTM_TOM0_CH2_SR0.B.SR0 = 10000;
		GTM_TOM0_CH2_SR1.B.SR1 = 10000;


		GTM_TOM0_CH3_SR0.B.SR0 = 10000;
		GTM_TOM0_CH3_SR1.B.SR1 = 10000 - dutycycle;


	}
	else;

}
void Servo_motor(int degree)
{

	GTM_TOM0_CH12_SR1.B.SR1 = (25000 + 250 * degree) >> 6 ;

}
