/*
 * sensor.c
 *
 *  Created on: 2019. 6. 6.
 *      Author: 이진호
 */


#include "TC27x_Device.h"
#include "Sensor.h"

#define SECTOR_DIVISION 16
typedef volatile enum
{
	L_SECTOR7, L_SECTOR6, L_SECTOR5, L_SECTOR4,
	L_SECTOR3, L_SECTOR2, L_SECTOR1, L_SECTOR0
}L_sec;

typedef volatile enum
{
	R_SECTOR0, R_SECTOR1, R_SECTOR2, R_SECTOR3,
	R_SECTOR4, R_SECTOR5, R_SECTOR6, R_SECTOR7

}R_sec;
typedef volatile enum
{
	L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16,
	L17, L18, L19,L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32,
	L33, L34, L35, L36, L37, L38, L39, L40, L41, L42, L43, L44, L45, L46, L47, L48,
	L49, L50, L51, L52, L53, L54, L55, L56, L57, L58, L59, L60, L61, L62, L63, L64,
	L65, L66, L67, L68, L69, L70, L71, L72, L73, L74, L75, L76, L77, L78, L79, L80,
	L81, L82, L83, L84, L85, L86, L87, L88, L89, L90, L91, L92, L93, L94, L95, L96,
	L97, L98, L99, L100, L101, L102, L103, L104, L105, L106, L107, L108, L109, L110, L111, L112,
	L113, L114, L115, L116, L117, L118, L119, L120, L121, L122, L123, L124, L125, L126, L127

}left_sensor_num;
typedef volatile enum
{
	R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16,
		R17, R18, R19,R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32,
		R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48,
		R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64,
		R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80,
		R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96,
		R97, R98, R99, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112,
		R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127


}right_sensor_enum;

#if 1
void SensorMaxminSetting(void)
{
	volatile int index=0, count = 0;
	while(1)
	{
		if(g_int32right_white <= g_rcsen[index].int32result) g_int32right_white = g_rcsen[index].int32result;
		else if (g_int32right_black >= g_rcsen[index].int32result) g_int32right_black = g_rcsen[index].int32result;
		else;


		if(g_int32left_white <= g_lcsen[index].int32result) g_int32left_white = g_lcsen[index].int32result;
		else if (g_int32left_black >= g_lcsen[index].int32result ) g_int32left_black = g_lcsen[index++].int32result;
		else;


		// white line max value detect
//
//		if(g_int32black >= g_rsen[index].int32result) g_int32black = g_lsen[index].int32result;
//		else if (g_int32black >= g_lsen[index].int32result ) g_int32black = g_lsen[index++].int32result;
//		else;

		// black line max value detect

		if(index == 120) index = 0;
		// initializing the index when the cycle end

		count++;
		if(count >= 10000)//if(!SW_R)
		{
			waitTime(TimeConst_1us* 50000);
			break;
		}

	}


//	g_int32white = (int)((g_int32white) * 0.); // Maximum Calibration
//	g_int32black = (int)((g_int32black) * 1.01); // minimum Calibration

#if 1
	sint32 i;

//	printf("  LineScan_right results "ENDL);
	for(i = 0; i<24; i+=3){
		printf("[%d] %5d, [%d] %5d, [%d] %5d\n", i, g_rcsen[i].int32result, i+1, g_rcsen[i+1].int32result, i+2, g_rcsen[i+2].int32result);
	}
	printf("\n");
#else
	printf("  LineScan_left results "ENDL);
	for(i = 0; i<128; i++){
		printf("%5d,",g_lcsen[i].int32result);
	}
	printf("\n");
#endif
	printf("LB : %d, LW : %d , RB : %d RW : %d\n",g_int32left_black, g_int32left_white,g_int32right_black,g_int32right_white);
}

void SensorVariableInit(void)
{
	volatile int i;
	for (i = 0; i < 120; i++) g_lcsen[i].int32weight = -60 + i;
	for (i = 0; i < 120; i++) g_rcsen[i].int32weight = -60 + i;


}

void SensorPassiveActiveChecking(void)
{

}

void MakePosition(void)
{
	volatile int index = 0;
//	volatile int int32data = 0;

	volatile int leftweight_sum = 0;
	volatile int rightweight_sum = 0;
	// 무게값의 합
	volatile int leftpos_sum = 0;
	volatile int rightpos_sum = 0;
	// 포지션의 합
	if(g_Flag.position_flag)
	{
		for (index = 0; index < 120; index++)
		{

			{
				leftweight_sum += g_lcsen[index].int32weight * (g_lcsen[index].u32active);
				leftpos_sum += ((int)(g_lcsen[index].f32data)) * g_lcsen[index].int32weight * (g_lcsen[index].u32active) ;
				//VFDPrintf("%8d",leftpos_sum);
			}

			{
				rightweight_sum += g_rcsen[index].int32weight * (g_rcsen[index].u32active);
				rightpos_sum += ((int)(g_rcsen[index].f32data)) * g_rcsen[index].int32weight * (g_rcsen[index].u32active) ;
			}

		}
//			printf("%d %d\n",leftpos_sum, rightpos_sum);

		// 포지션 계산
			g_f32_left_handle = ((float)leftpos_sum) / ((float)leftweight_sum);
			g_f32_right_handle = ((float)rightpos_sum) / ((float)rightweight_sum);
	}
	g_Flag.position_flag = FALSE;

	// 핸들값 추출
}

void LineScanningFuction(void)
{
	int index = 0;
	int division_cnt = 0;


	for(division_cnt = 0; division_cnt < 8; division_cnt++)
	{
		for (index = 0; index < SECTOR_DIVISION; index++)
		{
			g_u32left_line[division_cnt] += g_lcsen[index].u32active;
		}
	}


	for(division_cnt = 0; division_cnt < 8; division_cnt++)
	{
		for (index = 0; index < SECTOR_DIVISION; index++)
		{
			g_u32right_line[division_cnt] += g_rcsen[index].u32active;
		}
	}
	// Getting the Sector Info

}



#endif
